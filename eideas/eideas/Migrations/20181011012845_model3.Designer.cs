// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eideas.Data;

namespace eideas.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181011012845_model3")]
    partial class model3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("eideas.Areas.Identity.Data.CommentUpDoot", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("IdeaCommentId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id", "IdeaCommentId");

                    b.HasIndex("IdeaCommentId");

                    b.ToTable("CommentUpDoot");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DivisionName");

                    b.HasKey("DivisionId");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.Idea", b =>
                {
                    b.Property<int>("IdeaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("IdeaContent");

                    b.Property<string>("IdeaName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("UpdatedBy");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("IdeaId");

                    b.ToTable("Idea");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaComment", b =>
                {
                    b.Property<int>("IdeaCommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("EIdeasUserId");

                    b.Property<int?>("IdeaId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("IdeaCommentId");

                    b.HasIndex("EIdeasUserId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaComment");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaSubscription", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("IdeaId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id", "IdeaId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaSubscription");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaUpDoot", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("IdeaId");

                    b.Property<DateTime>("CreatedDate");

                    b.HasKey("Id", "IdeaId");

                    b.HasIndex("IdeaId");

                    b.ToTable("IdeaUpDoot");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<string>("CreatedDate");

                    b.Property<string>("TeamManagerId");

                    b.Property<string>("TeamName");

                    b.HasKey("TeamId");

                    b.HasIndex("TeamManagerId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.Unit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("UnitName");

                    b.HasKey("UnitId");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("eideas.Models.EIdeasUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("TeamId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserDivisionDivisionId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("UserUnitUnitId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserDivisionDivisionId");

                    b.HasIndex("UserUnitUnitId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.CommentUpDoot", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser", "EIdeasUser")
                        .WithMany("CommentUpDoots")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eideas.Areas.Identity.Data.IdeaComment", "IdeaComment")
                        .WithMany("CommentUpDoots")
                        .HasForeignKey("IdeaCommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaComment", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser", "EIdeasUser")
                        .WithMany("IdeaComments")
                        .HasForeignKey("EIdeasUserId");

                    b.HasOne("eideas.Areas.Identity.Data.Idea", "Idea")
                        .WithMany("IdeaComments")
                        .HasForeignKey("IdeaId");
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaSubscription", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser", "EideasUser")
                        .WithMany("IdeaSubscriptions")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eideas.Areas.Identity.Data.Idea", "Idea")
                        .WithMany("IdeaSubscriptions")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.IdeaUpDoot", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser", "EideasUser")
                        .WithMany("IdeaUpdoots")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eideas.Areas.Identity.Data.Idea", "Idea")
                        .WithMany("IdeaUpdoots")
                        .HasForeignKey("IdeaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eideas.Areas.Identity.Data.Team", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser", "TeamManager")
                        .WithMany()
                        .HasForeignKey("TeamManagerId");
                });

            modelBuilder.Entity("eideas.Models.EIdeasUser", b =>
                {
                    b.HasOne("eideas.Areas.Identity.Data.Team", "Team")
                        .WithMany("EideasUsers")
                        .HasForeignKey("TeamId");

                    b.HasOne("eideas.Areas.Identity.Data.Division", "UserDivision")
                        .WithMany("EideasUsers")
                        .HasForeignKey("UserDivisionDivisionId");

                    b.HasOne("eideas.Areas.Identity.Data.Unit", "UserUnit")
                        .WithMany("EideasUsers")
                        .HasForeignKey("UserUnitUnitId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eideas.Models.EIdeasUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eideas.Models.EIdeasUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
